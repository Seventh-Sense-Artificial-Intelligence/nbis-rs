name: nbis build develop

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: Run tests
      run: cargo test --release --all

  build-python-bindings:
    name: Build Python Wheel (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [self-hosted, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install Python + maturin
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install maturin
      run: pip install maturin twine

    - name: Build wheel
      run: maturin build --release --manifest-path Cargo.toml --out dist

    - name: Patch wheel
      run: ./patch_maturin_wheel.sh

    - name: Check wheel integrity
      run: twine check dist/*

    - name: Upload wheel as artifact
      uses: actions/upload-artifact@v4
      with:
            name: ${{ runner.os }}-wheel
            path: dist/*.whl

  # upload-to-pypi:
  #   name: Upload All Wheels to PyPI
  #   runs-on: ubuntu-latest
  #   needs: [build-python-bindings]

  #   steps:
  #   - name: Download all wheel artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       path: dist/

  #   - name: Flatten wheel structure
  #     run: |
  #       mkdir final
  #       find dist -name "*.whl" -exec cp {} final/ \;

  #   - name: Install Twine
  #     run: pip install twine

  #   - name: Upload to PyPI
  #     env:
  #       TWINE_USERNAME: __token__
  #       TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
  #     run: |
  #       twine upload final/*
